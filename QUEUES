import numpy as np
import pandas as pd
class CircularQueue:
def __init__(self):
self.front=0
self.rear=0
self.num_elems=0
self.capacity=5
self.data=np.empty(self.capacity) * np.nan
def enqueue(self, element):
if self.is_full():
print("Queue is full")
return False
else:
self.data[self.front]=element
self.front+=1
self.rear=(self.rear+1)%self.capacity
self.num_elems+=1
return True
def dequeue(self):
if self.is_empty():
# print("Queue is empty")
return "Queue is empty"
else:
self.data=np.delete(self.data, 0)
self.front=(self.front+1)%self.capacity
self.num_elems-=1
# return data
def is_full(self):
if self.num_elems == self.capacity :
return True
return False
def is_empty(self):
if self.num_elems==0:
return True
return False
def print_queue(self):
data_list=[]
if self.is_empty():
print(data_list)
else:
print("[|", end="")
for data in self.data:
if not np.isnan(data):
print(str(data)+"|", end="")
print("]")
q = CircularQueue()
q.enqueue(1)
q.print_queue()
q.enqueue(2)
q.print_queue()
q.enqueue(3)
q.print_queue()
q.enqueue(4)
q.print_queue()
q.enqueue(5)
q.print_queue()
q.enqueue(6)
q.print_queue()
q.dequeue()
q.print_queue()
q.dequeue()
q.print_queue()
q.dequeue()
q.print_queue()
q.dequeue()
q.dequeue()
q.print_queue()

